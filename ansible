如何查看模块帮助:
	ansible-doc -l 
	ansible-doc -s


ansible 命令应用基础:
	语法:ansible <host-pattern> [-m module_name] [-a args] [options]
		-f  forks  启动的并发线程数
		-m  module name: 要使用的模块
		-a args :模块特有的参数



常见模块:
		command: 命令模块, 默认模块, 用于在远程执行命令
			 #只在192.168.0.18上运行命令		
			  68* ansible 192.168.0.18 -m command -a 'date '
			  #在所有机器上运行命令
		   	  69  ansible all -m command -a 'date'
		cron:
		 	state:
		 		present: 安装
		 		absent:  移除
		 	ansible all -m cron -a 'minute="*/10" name="test" jon="echo hello"'
		 	创建一个叫test的计划任务
		 	[root@localhost ~]# ansible all -m command -a "crontab -l"
			192.168.0.20 | SUCCESS | rc=0 >>
			#Ansible: test
			*/10 * * * * echo hello
			删除计划任务
			[root@localhost ~]# ansible all -m cron -a 'minute="*/10" name="test" job="echo hello" state=absent'

		user:
			state: 
				present: 创建用户
				absent: 删除用户
			name:
				name=: 指定用户名
			#创建用户
			[root@localhost ~]# ansible all -m user -a 'name="user1"'
			#删除用户
			[root@localhost ~]# ansible all -m user -a 'name="user1" state="absent"'

		group:
			name=:
			gid=:
			[root@localhost ~]# ansible all -m group -a 'name=mysql gid=306 system=yes'

		copy:
			src=: 源文件路径
			dest=: 目的地路径
			content=: 取代src ,直接用此处的信息生成目标文件的内容

			[root@localhost ~]# ansible all -m copy -a 'src=/etc/fstab dest=/tmp/fstab.ansible mode=600'
			[root@localhost ~]# ansible all -m copy -a 'content="wqwqwqwqwqwq\n" dest=/tmp/fstab.ansible mode=600'

		file: 改变文件属性

			path=: 指定目的文件路径,可以用name 或dest 替代
			[root@localhost ~]# ansible all -m file -a 'mode=777 owner=mysql path=/tmp/fstab.ansible'

			#创建软连接
			[root@localhost ~]# ansible all -m file -a 'src=/tmp/fstab.ansible path=/tmp/fstab.link state=link'


5.2 inventory

	ansible 的主要功能在于批量主机操作，为了便捷的使用其中的部分主机，可以在inventory file 中将其分组命令。 默认的inventory file 为/etc/ansible/hosts

5.2.1 inventory 文件格式

	inventory文件 可以将同一主机同时归并到多个不铜雕塑组中， 若目标主机使用了非ssh端口，还可以在主机名称后面使用冒号端口号来表明

	[webservers]
	www1.com:222
	www.3.com

	[dbserveres]

	db1.com
	db23.com

	如果主机名称遵循相似的命名模式，可是通过列表的方式表示主机
	
	[webserver]
	#01-50的多台主机
	www.[01:50].example.com

	[db]
	db-[a:f].example.com

5.2.2 主机变量

	可以在inventory 中定义主机时为期添加主机变量以便于在playbook 中使用

	[webserver]
	www1.mage.com http_port=80 maxRequestPerChild=888
	www2.mage.com http_port=8080 maxRequestPerChild=909  传递给主机的特殊变量 ， http_port  = 8080 


5.2.3 组变量

	组变量是指赋予给指定组内所有主机上的在playbook 中可用的变量

	[webserver]
	www1.mage.com
	www2.mage.com

	[webserver:vars]   #:vars 是固定格式 ，在组名后面加上vars
	ntp_server=ntp.mage.com
	nfs_server=nfs.mage.com

5.2.4 组嵌套

	inventory 中，组还可以包含其他的组，并且也可以向祖中的主机指定变量， 不过这些变量只能在ansible-playbook中使用，而ansible 不支持

	[apache]
	http1.mage.com
	http2.mage.com

	[nginx]
	nginx1.mage.com
	nginx2.mage.com

	[webservers:children]   :chrildren 是固定格式
	apache
	nginx

	[webservers:vars]
	ntp_server=ntp.mage.com

5.2.5  inventory 参数




5.4 迭代

	当有需要重复执行的任务时,可以使用迭代机制.其使用的格式为将需要迭代的内容定义为item 变量使用, 并通过with_item 语句来致命迭代的元素列表即可.

	- name: add several users
	  user: name={{ item }} state=present groups=wheel   # item 是固定语法
	  with_items:
	    - testuser1
	    - testuser2

	 上面的语句相当于:

	 - name: add user1
	   user: name=testuser1 state=present groups=wheel
	 - name: add user2
	   user: name=testuser2 state=present groups=wheel

	 with_items 中可以使用元素 hashed 
	 with_items 中的列表可是字典,引用时要使用items.KEY

	 - name: add several users
	   user: name={{ item.name }} state=present groups={{ item.groups }}
	   with_items:
	     - { name: 'testuser1', groups:'wheel' }
	     - { name: 'testuser2', groups:'root' }
	 示例:
		[root@localhost ~]# cat items.yaml 
		- hosts: webservers
		  remote_user: root
		  tasks:
		  - name: add user
		    user: name={{item}} state=absent
		    with_items:
		      - user11
		      - user12



6 ansible-playbook

示例：

	- hosts: webservers
	  vars:
	    http_port: 80
	    max_chrilden: 256
	  remote_user: root
	  tasks:
	  - name: 随便写
	    yum: name=httpd state=latest
	  - name: xxxxxx
	    service: name=httpd state=started

	  handles:
	    -name: retsart apache 随便写
	      service: name=httpd state=restarted

playbook组成结构：
	Inventory
	Modules
	ad hoc commands
	playbooks
		tasks: 任务，即调用模块完成的某操作
		variables: 变量
		template: 模板
		handlers: 处理器，由某事件触发执行的操作
		roles： 角色




6.1 playbook基础组件

6.1.1 hosts 和users
	
		playboos 中的每一个play的目的都是为了让某些主机以某个指定的用户的身份执行任务， hosts 用于指定要执行任务的主机，可以是一个或者多个由冒号分隔带主机， remote_user 则用于指定远程主机上执行任务的用户。

		不过remote_user也可以用于各task中，也可以通过指定通过sudo的方式在远程主机上执行任务，其可用于play全局或某任务，此外可以在使用sudo_user指定sudo时切换的用户。

		- hosts: webservers
		  remote_user: mage
		  tasks:
		    - name: tets connection
		      ping:
		      remote_user: mage
		      sudo: yes


			
6.1.2 任务列表和action

	play的主体部分是task list 。 task list 中的各任务按次序逐个在hosts中指定的所有主机上执行，即在所有主机上完成第一个任务后再开始第二个，在运行自上而下的playboos是，如果中途发生错误，所有已执行的任务都可能回滚（不能回滚的除外）， 因此在更正playbook后重新执行一次即可。

	task的目的是使用指定的参数执行模块，而在模块参数中可以使用变量， 模块执行时幂等的，这意味着多次执行时安全的，因此其结果均一致。

	每个task逗应该有其name ，永远playbook的执行结果输出，建议其内容尽可能的清晰的描述任务执行步骤，如果未提供name，则action的结果将用于输出。

	在众多模块中，只有command 可shell 模块仅需要给定一个列表而无需使用key=value 格式

	task:
	  - name: disable selinux
	    command: /sbin/setenforce 0

	 如果命令或脚本的退出码不为0 ，可以使用如下方式替代

	 task:
	   - name: run this command and ignore the result
	     shell: /usr/sbin/xxxx || /bin/true

	 或者使用ignore_error 来忽略错误信息
	  task:
	    - name: xxxxc
	      shell: /s/scsc
	      ignore_errors: True

	 示例1：

	 需要在/etc/ansible/host 里面定义Inventory

	 [root@localhost ~]# vim nginx.yaml 
 
	- hosts: webservers
	  remote_user: root
	  tasks:
	  - name: create nginx group
	    group: name=nginx system=yes gid=208
	  - name: create nginx user
	    user: name=nginx uid=208 group=nginx system=yes

	 [root@localhost ~]# ansible-playbook  nginx.yaml

	 实例2:
	 - hosts: webservers
	  remote_user: root
	  tasks:
	  - name: install httpd package
	    yum: name=httpd state=latest
	  - name: install configuration file
	    copy: src=/root/conf/httpd.conf dest=/etc/httpd/conf/httpd.conf
	  - name: start httpd service
	    service: name=httpd enabled=true state=started




6.1.3  handlers

		用于当关注的资源发生变化时采取的一定操作.

		'notify'这个action可用于在每个play的最后被触发, 这样可避免多次有改变发生时每次都执行指定的操作. 取而代之, 仅在所有的变化发生完成后一次性的执行操作. 在notify中列出的操作称为handlers ,也即notify中调用handlers 中定义的操作.

			- name: template configuration file
			  template: src=conf/httpd.conf dest=/etc/httpd/conf/httpd.conf
			  notify:
			    - restart apache
			    - restart memecache
			handlers:
			  - name restart apache
			    service: name=httpd state=restarted
			  - name: restart memecached
			    service: name=memecached state=restarted

		实例:
		- hosts: webservers
		  remote_user: root
		  tasks:
		  - name: install httpd package
		    yum: name=httpd state=latest
		  - name: install configuration file
		    copy: src=/root/conf/httpd.conf dest=/etc/httpd/conf/httpd.conf
		    notify:
		    - restart httpd
		  - name: start httpd service
		    service: name=httpd enabled=true state=started
		  handlers:
		  - name: restart httpd
		    service: name=httpd state=restarted




6.1.4 variables

	变量用 {{ }} 表示

	示例:
	- hosts: webservers
	  remote_user: root
	  vars:
	  - packages: httpd
	  tasks:
	  - name: install {{ packages }} package
	    yum: name={{ packages }} state=latest
	  - name: install configuration file
	    copy: src=/root/conf/httpd.conf dest=/etc/httpd/conf/httpd.conf
	    notify:
	    - restart httpd
	  - name: start {{packages}} service
	    service: name={{ packages }} enabled=true state=started
	  handlers:
	  - name: restart httpd
	    service: name=httpd state=restarted

	 主机变量:
		 在inventory 中给每个主机定义的变量 ,变量名不能用vars ,vars代表全部变量 ,
		 ansible 192.168.0.20 -m setup
		[webservers]
		#192.168.0.18
		192.168.0.19 var=0.19
		192.168.0.20 var=0.20

		[root@localhost ~]# cat vars.yaml 
		- hosts: webservers
		  remote_user: root
		  tasks:
		  - name: vars test
		    copy: content="{{ ansible_default_ipv4.address}},{{var}}" dest=/tmp/ip
		    #{{ ansible_default_ipv4.address}}  这是ansible自带的变量, 通过ansible 192.168.0.20 -m setup 获取

6.4.5 条件

	在task后添加when 字句即可使用条件测试, when 语句支持Jinja2 表达式语法, 列如:

	tasks:
	  - name: shutdown system
	    command: init 0
	    when: ansible_os_family == "Debain"

	 示例:
	[root@localhost ~]# cat when.yaml 
	- hosts: webservers
	  remote_user: root
	  vars: 
	  - username: user10
	  tasks:
	  - name: create user {{username}}
	    user: name={{ username }}
	    when: ansible_fqdn == "ansible-slave-01"

6.4.6 template

	示例:  根据每个主机的参数生成特定的配置文件 ,
	1. 用anslbie 变量名称替代模板文件需要变动的参数
	Listen {{http_port}}
	MaxClients       {{max_clients}}
	ServerName {{ansible_fqdn}}
	2. 在inventory 中定义特有变量
	[webservers]
	#192.168.0.18
	192.168.0.19 http_port=900  max_clients=666
	192.168.0.20  http_port=1000 max_clients=999
	3. 在yaml 文件中调用template 
	[root@localhost ~]# cat apache.yaml 
	- hosts: webservers
	  remote_user: root
	  vars:
	  - packages: httpd
	  tasks:
	  - name: install {{ packages }} package
	    yum: name={{ packages }} state=latest
	  - name: install configuration file
	    #copy: src=/root/conf/httpd.conf dest=/etc/httpd/conf/httpd.conf
	    template: src=/root/template/httpd.conf dest=/etc/httpd/conf/httpd.conf
	    notify:
	    - restart httpd
	  - name: start {{packages}} service
	    service: name={{ packages }} enabled=true state=started
	  handlers:
	  - name: restart httpd
	    service: name=httpd state=restarted


7. tags

	在playboos中可以为某个或者某些任务定义一个标签,在执行playbook时 可以通过ansible-playboo  --tags=xxx 来只运行带有tag 的模块


	[root@localhost ~]# cat apache.yaml 
	- hosts: webservers
	  remote_user: root
	  vars:
	  - packages: httpd
	  tasks:
	  - name: install {{ packages }} package
	    yum: name={{ packages }} state=latest
	  - name: install configuration file
	    #copy: src=/root/conf/httpd.conf dest=/etc/httpd/conf/httpd.conf
	    template: src=/root/template/httpd.conf dest=/etc/httpd/conf/httpd.conf
	    notify:
	    - restart httpd
	    tags:
	    - conf
	  - name: start {{packages}} service
	    service: name={{ packages }} enabled=true state=started
	  handlers:
	  - name: restart httpd
	    service: name=httpd state=restarted

	[root@localhost ~]# ansible-playbook apache.yaml --tags=conf



































































		

